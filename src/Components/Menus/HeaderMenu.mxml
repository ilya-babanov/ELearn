<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      height="{GlobalConstants.HEADER_MENU_HEIGHT}"
                      creationComplete="onCreationComplete(event)"
        >
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

    <fx:Metadata>
        [ResourceBundle("HeaderMenu")]
    </fx:Metadata>
    <fx:Script>
		<![CDATA[
        import Components.ContentPages.IntroCP;

        import com.greensock.TweenLite;
        import com.greensock.easing.Expo;

        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        private const RESOURCE_BUNDLE:String = "HeaderMenu";

        public var currentContentPage:UIComponent;
        public var pressedButton:Button;

        protected function onCreationComplete(event:FlexEvent):void {
            btnTheory.addEventListener(MouseEvent.CLICK, onTheoryClick);
            btnPractice.addEventListener(MouseEvent.CLICK, onPracticeClick);
            btnExercises.addEventListener(MouseEvent.CLICK, onExercisesClick);
            btnControl.addEventListener(MouseEvent.CLICK, onControlClick);

        }

        protected function onTheoryClick(event:MouseEvent):void {
            if (currentContentPage) {
                pressedButton = btnTheory;
                currentContentPage.dispatchEvent(new Event("Theory", true));
                TweenLite.to(line, 0.3, {x: pressedButton.x, ease: Expo.easeOut});
            }
        }

        protected function onPracticeClick(event:MouseEvent):void {
            if (currentContentPage) {
                pressedButton = btnPractice;
                currentContentPage.dispatchEvent(new Event("Practice", true));
                TweenLite.to(line, 0.3, {x: pressedButton.x, ease: Expo.easeOut});
            }
        }

        protected function onExercisesClick(event:MouseEvent):void {
            if (currentContentPage) {
                pressedButton = btnExercises;
                currentContentPage.dispatchEvent(new Event("Exercises", true));
                TweenLite.to(line, 0.3, {x: pressedButton.x, ease: Expo.easeOut});
            }
        }

        protected function onControlClick(event:MouseEvent):void {
            if (currentContentPage) {
                pressedButton = btnControl;
                currentContentPage.dispatchEvent(new Event("Control", true));
                TweenLite.to(line, 0.3, {x: pressedButton.x, ease: Expo.easeOut});
            }
        }

        public function setDefaultProperties():void {
            onTheoryClick(null);
        }

        protected function onTestsBtnClick(event:MouseEvent):void {
            if (currentContentPage) {
                pressedButton = event.currentTarget as Button;
                currentContentPage.dispatchEvent(new Event(event.currentTarget.label, true));
                TweenLite.to(line, 0.3, {x: pressedButton.x, ease: Expo.easeOut});
            }
        }

        ]]>
	</fx:Script>
    <s:states>
        <s:State name="normal"/>
        <s:State name="tests"/>
        <s:State name="results"/>
        <s:State name="intro"/>
		<s:State name="vocabulary" />
		<s:State name="library" />
    </s:states>

    <s:layout>
        <s:HorizontalLayout horizontalAlign="left" verticalAlign="top"/>
    </s:layout>
    <s:Group width="50%" height="100%">
        <s:Rect top="0" left="0" right="0" bottom="0">
            <s:fill>
                <s:SolidColor color="#eeeeee"/>
            </s:fill>
        </s:Rect>
        <s:Label id="titleText" horizontalCenter="0"
                 text="{resourceManager.getString(RESOURCE_BUNDLE, 'Header')}"
                 verticalCenter="0"/>
    </s:Group>
    <s:Group width="50%" height="100%">
        <s:layout>
            <s:HorizontalLayout horizontalAlign="left" verticalAlign="top"/>
        </s:layout>
        <s:Button id="btnTheory" label.normal="{resourceManager.getString(RESOURCE_BUNDLE, 'Theory')}"
                  label.intro="{resourceManager.getString(RESOURCE_BUNDLE, 'Theory')}"
                  label.results="{resourceManager.getString(RESOURCE_BUNDLE, 'Results')}"
				  label.vocabulary="Словарь"
				  label.library="Литература"
                  excludeFrom="tests"
                  width="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"/>
        <s:Button id="btnPractice" label="{resourceManager.getString(RESOURCE_BUNDLE, 'Practice')}"
                  includeIn="normal"
                  width="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"/>
        <s:Button id="btnExercises" label="{resourceManager.getString(RESOURCE_BUNDLE, 'Exercises')}"
                  includeIn="normal"
                  width="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"/>
        <s:Button id="btnControl" label="{resourceManager.getString(RESOURCE_BUNDLE, 'Control')}"
                  includeIn="normal"
                  visible="false"
                  width="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"/>

        <s:Button id="btn1" label="№1" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        <s:Button id="btn2" label="№2" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        <s:Button id="btn3" label="№3" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        <s:Button id="btn4" label="№4" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        <s:Button id="btn5" label="№5" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        <s:Button id="btn6" label="№6" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        <!--<s:Button id="btn7" label="№7" click="onTestsBtnClick(event)"
                  includeIn="tests"
                  width="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"/>
        -->


        <s:Line id="line"
                width.normal="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"
                width.intro="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"
                width.results="{GlobalConstants.HEADER_MENU_BUTTON_WIDTH}"
                width.tests="{GlobalConstants.HEADER_MENU_SMALL_BUTTON_WIDTH}"
                x.normal="{btnTheory.x}" y.normal="{btnTheory.y + btnTheory.height + 2}"
                x.intro="{btnTheory.x}" y.intro="{btnTheory.y + btnTheory.height + 2}"
                x.results="{btnTheory.x}" y.results="{btnTheory.y + btnTheory.height + 2}"
                x.tests="{btn1.x}" y.tests="{btn1.y + btn1.height + 2}"
				excludeFrom="library, vocabulary"
                includeInLayout="false">
            <s:stroke>
                <s:SolidColorStroke color="#FF2222" weight="3"/>
            </s:stroke>
        </s:Line>
    </s:Group>


</s:SkinnableContainer>
