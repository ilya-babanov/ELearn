<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  creationComplete="onCreationComplete(event)" xmlns:TuringMachine="Components.TuringMachine.*">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			 public var timer:Timer = new Timer(10000,10);
			public var stepText0:String = 'Рассмотрим процесс написания программы машины тьюринга по шагам.\n';
			public var stepText1:String = stepText0 + ' 1. Начальное состояние МТ - q1, именно его и записываем в первой ячейке первой команды.\n';
			public var stepText2:String = stepText1 +' 2. Первый символ, который считывает головка МТ находится в первой ячейке ленты, в нашем случае это символ 1. Запишем его в ячейку считываемы символ\n'; 
			public var stepText3:String = stepText2 + ' 3. Посмотрим на текущее сосотояние МТ и текущий считываемый символ и запишим команды записи и действия, соответствующие нашему заданию.' + 
				'В нашем случе мы в состонии q1 видим символ 1. Исходя из задания, поскольку это не последний символ на ленте, его менять не следует, поэтому символ для записи будет тот же, и действие МТ будет r - движение вправо\n';
			public var stepText4:String = stepText3 +' 4. Следует решить, в какое состояние переводить МТ. В нашем случае оставим состояние таким же, так как можно рассмотреть команду МТ с таким же состоянием, но другим считываемым символом. Получилась следующая команда: (q1,1,1,r,q1) \n ' ;
			public var stepText5:String = stepText4 + ' 5. МТ совершила переход на ячейку вправо и сменила состояние (либо осталась в том же, как в данном примере). Переходим к шагу №3 и начинаем рассуждения заново, имея при этом новый текущий символ и новое текущее состояние.\n' ;
			public var stepText6:String = stepText5 + ' 6. В команду, которой МТ завершает выполнение задания, в ячейку "действие" записываем символ h (halt), показывая МТ, что нужно завершить работу';
			
			public var stepCode0:String = " , , , , ; , , , , ; , , , , ; , , , , ";
			public var stepCode1:String = "q1,1, , , ; , , , , ;  , , , , ; , , , , ";
			public var stepCode2:String = "q1,1,1, , ; , , , , ; , , , , ; , , , , ";
			public var stepCode3:String = "q1,1,1,r, ; , , , , ; , , , , ; , , , , ";
			public var stepCode4:String = "q1,1,1,r,q1; , , , , ; , , , , ; , , , , ";
			public var stepCode5:String = "q1,1,1,r,q1; , , , , ; , , , , ; , , , , ";
			public var stepCode6:String = "q1,1,1,r,q1;q1,0,0,r,q1;q1,,,l,q2;q2,1,0,h,q2";
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				addEventListener("Theory", onTheoryEvent);
				addEventListener("Practice", onPracticeEvent);
				addEventListener("Exercises", onExercisesEvent);
				addEventListener("Control", onControlEvent);
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				
				practiceTm.writeCodeToTM(stepCode0);
				practiceTm.descriptionTextField.text = stepText0;
				practiceTm.line.writeMessageToLine([1,0,1,0,0,1,0,1,1,1]);
				/* var textSteps:String = 'Рассмотрим процесс написания программы машины тьюринга по шагам.\n'
					+' 1. Начальное состояние МТ - q1, именно его и записываем в первой ячейке первой команды.\n'
					+' 2. Первый символ, который считывает головка МТ находится в первой ячейке ленты, в нашем случае это символ 1.\n'
					+' 3. Посмотрим на текущее сосотояние МТ и текущий считываемый символ и запишим команды записи и действия, соответствующие нашему заданию.' +
						'В нашем случе мы в состонии q1 видим символ 1. Исходя из задания, поскольку это не последний символ на ленте, его менять не следует, поэтому символ для записи будет тот же, и действие МТ будет r - движение вправо\n' +
						' 4. Следует решить, в какое состояние переводить МТ. В нашем случае оставим состояние таким же, так как можно рассмотреть команду МТ с таким же состоянием, но другим считываемым символом. Получилась следующая команда: (q1,1,1,r,q1) \n ' +
						' 5. МТ совершила переход на ячейку вправо и сменила состояние (либо осталась в том же, как в данном примере). Переходим к шагу №3 и начинаем рассуждения заново, имея при этом новый текущий символ и новое текущее состояние.\n' +
						' 6. В команду, которой МТ завершает выполнение задания, в ячейку "действие" записываем символ h (halt), показывая МТ, что нужно завершить работу';
				 */
				/* practiceTm.writeCodeToTM("q1,1,1,r,q1;q1,0,0,r,q1;q1,,,l,q2;q2,1,0,h,q1");
				practiceTm.descriptionTextField.text = textSteps; */

                exercisesTm.writeCodeToTM("q1,,,,");
                exercisesTm.line.writeMessageToLine([1,0,1,2,0,1,0,1,2,2]);
                exercisesTm.descriptionTextField.text = GlobalConstants.TEXT_ALG;
			}
			
			protected function onTheoryEvent(event:Event):void
			{
				currentState = "theory";
			}
			
			protected function onPracticeEvent(event:Event):void
			{
				currentState = "practice";
				timer.start();
			}
			
			protected function onExercisesEvent(event:Event):void
			{
				currentState = "exercises";
			}
			
			protected function onControlEvent(event:Event):void
			{
				currentState = "control";
			}
			
			protected function onTimer(event:TimerEvent):void
			{
				if(timer.currentCount == 0){
					practiceTm.writeCodeToTM(stepCode0);
					practiceTm.descriptionTextField.text = stepText0;
				} else if(timer.currentCount == 1){
					practiceTm.writeCodeToTM(stepCode1);
					practiceTm.descriptionTextField.text = stepText1;
				}else if(timer.currentCount == 2){
					practiceTm.writeCodeToTM(stepCode2);
					practiceTm.descriptionTextField.text = stepText2;
				}else if(timer.currentCount == 3){
					practiceTm.writeCodeToTM(stepCode3);
					practiceTm.descriptionTextField.text = stepText3;
				}else if(timer.currentCount == 4){
					practiceTm.writeCodeToTM(stepCode4);
					practiceTm.descriptionTextField.text = stepText4;
				}else if(timer.currentCount == 5){
					practiceTm.writeCodeToTM(stepCode5);
					practiceTm.descriptionTextField.text = stepText5;
				}else if(timer.currentCount == 6){
					practiceTm.writeCodeToTM(stepCode6);
					practiceTm.descriptionTextField.text = stepText6;
				}
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Power id="expo" exponent="8"/>
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="theory"/>
		<s:State name="practice"/>
		<s:State name="exercises"/>
		<s:State name="control"/>
	</s:states>
	
	<s:transitions>
		<s:Transition>
			<s:Move target="{pagesGroup}" duration="250" easer="{expo}"/> 
		</s:Transition>
	</s:transitions>
	
	<s:Group id="pagesGroup" height="100%" x.theory="0" x.practice="-1000" x.exercises="-2000" x.control="-3000">
		
		<s:VGroup id="theoryGroup" width="900" height="100%" x="0" gap="15">
			<s:Label id="headLabelTheory" text="2. Определение Машины Тьюринга" verticalAlign="middle" left="10"/>
			<s:RichEditableText id="richTextTheory" width="92%" height="100%" editable="false">
				<s:p>
					<s:span fontWeight="bold">Машиной Тьюринга </s:span>
					называется упорядоченная четвёрка объектов <s:span fontStyle="italic">Т=[A,Q,P,q']</s:span>, 
					где <s:span fontStyle="italic">T</s:span> - символ машины Тьюринга, <s:span fontStyle="italic">A</s:span> - конечное множество букв (рабочий алфавит), 
					<s:span fontStyle="italic">Q</s:span> - конечное множество символов (имён состояний), <s:span fontStyle="italic">q'</s:span> - имя начачльного состояния, 
					<s:span fontStyle="italic">P</s:span> - множество упорядоченных пятёрок <s:span fontStyle="italic">(q,a,a',v,q'), q,q'∈Q, a,a'∈A∪λ, v∈(l,r)</s:span>(программа).<!--, 
					определяющее три функции:-->
				</s:p>
				<s:p>
					Структурно, машину Тьюринга можно представить в виде 
					ограниченной с одного конца бесконечной <s:span fontWeight="bold">ленты</s:span>, 
					разделённой на <s:span fontWeight="bold">ячейки</s:span>, и 
					комбинированной читающей и пишущей <s:span fontWeight="bold">головки</s:span>, 
					которая может перемещаться вдоль ленты от ячейки к ячейке.
				</s:p>
				<s:p>
					В каждой ячейке ленты может быть записан один знак алфавита <s:span fontStyle="italic">А</s:span>,
					называемого <s:span fontWeight="bold">рабочим алфавитом</s:span> машины Тьюринга, 
					либо <s:span fontWeight="bold">пробел</s:span><!-- (его мы будем обозначать знаком λ)-->.
				</s:p>
				<s:p>
					Головка машины Тьюринга в кажды момент времени 
					располагается над одной из ячеек ленты, называемой 
					<s:span fontWeight="bold">рабочей ячейкой</s:span>, и 
					считывает знак, записанный в этой ячейке (букву рабочего алфавита или пробел).
					
					При этом головка находится в одном из коненого множества <s:span fontStyle="italic">Q=[q1,q2,...,qn]</s:span>
					дискретных <s:span fontWeight="bold">состояний</s:span>, среди которых 
					выделено одно <s:span fontWeight="bold">начальное состояние</s:span> <s:span fontStyle="italic">q0</s:span>. 
					В зависимости от состояния, в котором находится головка, и от буквы, записанной в рабочей ячейке,
					машина Тьюринга выполняет одну из <s:span fontWeight="bold">команд</s:span>, составляющих её 
					<s:span fontWeight="bold">программу</s:span>.
				</s:p>
				<s:p>
					Выполнение команды в выполнении 
					<s:span fontWeight="bold">элементарного действия</s:span>,
					предписываемого этой командой, и переводе головки в новое состояние. 
					Определено три вида элементраных действий: 
					<s:span fontWeight="bold">сдвиг</s:span> головки
					на одну ячейку <s:span fontStyle.theory="italic">влево</s:span> 
					(если считать, что лента ограничена слева, то для крайней
					левой ячейки сдвиг влево не определён), 
					<s:span fontWeight="bold">сдвиг</s:span> головки на одну ячейку 
					<s:span fontStyle="italic">вправо</s:span>, 
					<s:span fontWeight="bold">запись</s:span> в рабочую ячейку какой-либо 
					буквы рабочего алфавита либо пробел. Таким образом, каждая команда может сменить
					рабочую ячейку, сделав новой рабочей ячейкой одну из соседних ячеек старой рабочей ячейки, или, 
					не меняя рабочей ячейки изменить знак, записанный в рабочей ячейке, и изменить состояние головки.
				</s:p>
				<s:p>
					Перед началом работы машины Тьюринга на её ленту записывается исходное сообщение так, 
					что в каждую ячейку ленты записывается одна буква сообщения, либо пробел. При этом ячейки, расположенные справа от последней буквы исходного сообщения, заполняются пробелами и считаются <s:span fontStyle="italic">пустыми</s:span>.
					В начале работы МТ её головка приводится в начальное состояние <s:span fontStyle="italic">q'</s:span> и помещается над начальной рабочей ячейкой, в качестве которой мы будем брать первую ячейку на ленте
				</s:p>
			</s:RichEditableText>
		</s:VGroup>
		
		
		<s:VGroup id="practiceGroup" width="900" height="100%" x="1000" >
			<s:Label id="headLabelPractice" text="2. Примеры" verticalAlign="middle" left="10"/>
			<s:RichEditableText editable="false">
				<s:p>
					Составим программу для машины Тьюринга, записывающую 0, вместо последней единицы на ленте.
				</s:p>
				<s:p>
					Рабочий алфавит - (1,0)
				</s:p>
				<s:p>
					Входное сообщение - "1010010111"
				</s:p>
				<s:p>
					Начальное состояние - q1
				</s:p>
				<s:p fontStyle="italic">
					Лента машины Тьюринга:
				</s:p>
			</s:RichEditableText>
			<TuringMachine:TMview id="practiceTm" width="100%" height="100%"/>
		</s:VGroup>
		
		
		<s:VGroup id="exercisesGroup" width="900" height="100%" x="2000" gap="15" >
			<s:Label id="headLabelExercises" text="Задание №1" verticalAlign="middle" left="10"/>
			<s:RichEditableText width="100%" editable="false">
				<s:p>
					Требуется составить программу в "пятёрках" для машины Тьюринга, записывающую символ "#", вместо последнго символа на ленте.
				</s:p>
                <s:p>
                    Рабочий алфавит - (0,1,2)
                </s:p>
                <s:p>
                    Входное сообщение - "1012010122"
                </s:p>
                <s:p>
                    Начальное состояние - q1
                </s:p>
                <s:p fontStyle="italic">
                    Лента машины Тьюринга:
                </s:p>
			</s:RichEditableText>
			<TuringMachine:TMview id="exercisesTm" width="100%" height="100%"/>
		</s:VGroup>
		
		
		<s:VGroup id="controlGroup" width="900" height="100%" x="3000" >
			<s:Label id="headLabelControl" text="2. Контроль по разделу" verticalAlign="middle" left="10"/>
			<s:RichEditableText id="richTextControl" width="80%" height="100%" >
				...
			</s:RichEditableText>
		</s:VGroup>
		
	</s:Group>
	
</s:SkinnableContainer>
