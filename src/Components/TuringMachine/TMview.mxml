<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:TuringMachine="Components.TuringMachine.*"
         creationComplete="onCreationComplete(event)" >
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import Components.GradingEvent;

        import Skins.ButtonSmallSkin;

        import mx.charts.HitData;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.FlexEvent;

        import spark.components.TextInput;

        public var commandsVector:Vector.<TMCommand>;
        private var timer:Timer;
        private var header:Array;

        private var currentTMState:String;

        [Bindable]
        private var commandsDataGroupDP:ArrayCollection;

        [Bindable]
        private var headerDataGroupDP:ArrayCollection;

        public var answer:String;
        public var exerciseNumber:int;


        protected function onCreationComplete(event:FlexEvent):void {
            initializeComponent()
        }

        protected function initializeComponent(event:Event = null):void {
            commandsVector = new Vector.<TMCommand>;

            executeBtn.visible = true;
            stopBtn.visible = false;

            header = ["Начальное состояние", "Cимвол на ленте", "Записываемый символ", "Действие", "Конечное состояние"];

            configureDataList();
            configureTMLineController();
            configureListeners();
        }

        private function configureListeners():void {
            executeBtn.addEventListener(MouseEvent.CLICK, onExecuteBtnClick);
            stopBtn.addEventListener(MouseEvent.CLICK, onStopBtnClick);
        }

        private function configureTMLineController():void {
            line.configureInitialState(GlobalConstants.TURING_LINE_START_LENGHT);
        }


        protected function onExecuteBtnClick(event:MouseEvent):void {
            if (getCommandsFromDataProvider(commandsDataGroupDP)) {
                currentTMState = commandsVector[0].startState;
                line.currentIndex = 0;
                timer = new Timer(250, 100000);
                timer.addEventListener(TimerEvent.TIMER, executeCodeByTimer);
                timer.start();

                reverseBtnsVisible();
            }
        }

        public function writeCodeToTM(text:String):Boolean {
            text = text.replace(GlobalConstants.regExpForBreak, "");

            var commandsArray:Array = text.split(";");
            var commandStepsArray:Array = [];
            var stringCommand:String;

            commandsDataGroup.dataProvider.removeAll();
            commandsVector = new Vector.<TMCommand>();

            for (var i:int = 0; i < commandsArray.length; i++) {
                stringCommand = commandsArray[i];
                commandStepsArray = stringCommand.split(",");
                if (commandStepsArray.length != 5) {
                    Alert.show("Неверный формат!", "Ошибка");
                    return false;
                }
                else {
                    var command:TMCommand = new TMCommand(commandStepsArray[0], commandStepsArray[1],
                            commandStepsArray[2], commandStepsArray[3],
                            commandStepsArray[4]);
                    commandsVector.push(command);
                    commandsDataGroup.dataProvider.addItem(command);
                }
            }
            var addRowButton:Button = new Button();
            addRowButton.setStyle("skinClass", ButtonSmallSkin);
            /*while (commandsDataGroup.dataProvider.length < 7) {
                var emptyCommand:TMCommand = new TMCommand('', '', '', '', '');
                commandsDataGroup.dataProvider.addItem(emptyCommand);
            }*/
            addRowButton.label = "Новая строка";
            addRowButton.addEventListener(MouseEvent.CLICK, onAddRowButtonClick);
            commandsDataGroup.dataProvider.addItem(addRowButton);
            return true;
        }

        private function getCommandsFromDataProvider(dataProvider:ArrayCollection):Boolean {
            var command:TMCommand;
            for (var i:int = 0; i < dataProvider.length; i++) {
                if (dataProvider[i] is TMCommand) {
                    command = dataProvider[i] as TMCommand;
                    commandsVector.push(command);
                }
            }
            return true;
        }

        protected function executeCodeByTimer(event:TimerEvent):void {
            var currentCommand:TMCommand;
            currentCommand = findCommand(line.currentSymbol);
            if (!currentCommand) {
                stopExecute();
                return;
            }
            //write new symbol
            line.writeSymbol(currentCommand.writeSymbol);
            //do action
            switch (currentCommand.action.toLowerCase()) {
                case "r":
                    line.stepRight();
                    break;
                case "l":
                    line.stepLeft();
                    break;
                case "n":
                    //do nothing...
                    break;
                case "h":
                    stopExecute();
                    grading();
                    break;
                default:
                    Alert.show("Неизвестная команда", "Ошибка");
                    stopExecute();
                    trace("Unknown command");
                    break;
            }
            //go to the next state
            currentTMState = currentCommand.endState;
        }


        private function findCommand(currentSymbol:String):TMCommand {
            for (var i:int = 0; i < commandsVector.length; i++) {
                if (commandsVector[i].startState == currentTMState && commandsVector[i].readSymbol == currentSymbol)
                    return commandsVector[i];
            }
            Alert.show("Не найдена команда для символа '" + currentSymbol + "' и состояния '" + currentState + "'", "Ошибка");
            return null;
        }


        private function stopExecute():void {
            reverseBtnsVisible();
            timer.removeEventListener(TimerEvent.TIMER, executeCodeByTimer);
            timer.stop();
        }


        protected function onStopBtnClick(event:MouseEvent):void {
            stopExecute();
        }

        private function grading():void {
            var userAnswer:String = '';
            var isCorrect:Boolean = true;
            var event:GradingEvent;
            for (var i:int = 0; i < answer.length; i++) {
                userAnswer += line.elements[i].text;
                if (line.elements[i].text != answer.charAt(i)) {
                    isCorrect = false;
                }
            }
            if (exerciseNumber == 3 && userAnswer == '') {
                isCorrect = true;
            }
            userAnswer = '';
            commandsDataGroup.invalidateDisplayList();
            commandsDataGroup.validateNow();
            for (i = 0; i < commandsDataGroupDP.length; i++) {
                if(commandsDataGroupDP.getItemAt(i) as TMCommand)
                    userAnswer += (commandsDataGroupDP.getItemAt(i) as TMCommand).toString() + '\n';
            }

            if (isCorrect) {
                Alert.show('Правильный ответ!');
                event = new GradingEvent(GradingEvent.TYPE, exerciseNumber, userAnswer, 'Верно');
            } else {
                Alert.show('Задание выполнено неверно!');
                event = new GradingEvent(GradingEvent.TYPE, exerciseNumber, userAnswer, 'Неверно');
            }
            dispatchEvent(event);
        }


        protected function reverseBtnsVisible():void {
            stopBtn.visible = !stopBtn.visible;
            executeBtn.visible = !executeBtn.visible;
        }


        private function configureDataList():void {
            headerDataGroupDP = new ArrayCollection();
            commandsDataGroupDP = new ArrayCollection();

            headerDataGroupDP.addItem(new TMCommand("Начальное состояние", "Читаемый символ", "Символ для записи", "Действие", "Конечное состояние"));
            headerDataGroup.itemRenderer = new ClassFactory(TMHeaderRenderer);
            headerDataGroup.dataProvider = headerDataGroupDP;

            /*for (var i:int = 0; i < 5; i++) {
                commandsDataGroupDP.addItem(new TMCommand("", "", "", "", ""));
            }*/
            var addRowButton:Button = new Button();
            addRowButton.setStyle("skinClass", ButtonSmallSkin);
            addRowButton.label = "Новая команда";
            addRowButton.addEventListener(MouseEvent.CLICK, onAddRowButtonClick);
            commandsDataGroupDP.addItem(addRowButton);

            commandsDataGroup.itemRendererFunction = rendererFactory;
            commandsDataGroup.dataProvider = commandsDataGroupDP;

        }


        protected function rendererFactory(item:Object):ClassFactory {
            var rendererFactory:ClassFactory;
            if (item is TMCommand) {
                rendererFactory = new ClassFactory(TMCommandRenderer);
            } else if (item is Button) {
                rendererFactory = new ClassFactory(TMButtonRenderer);
            }

            return rendererFactory;
        }

        protected function onAddRowButtonClick(event:MouseEvent):void {
            var command:TMCommand = new TMCommand("", "", "", "", "");
            commandsVector.push(command);
            commandsDataGroupDP.addItemAt(command, commandsDataGroupDP.length - 1);
            commandsDataGroup.validateNow();
            if (commandsDataGroupScroller)
                commandsDataGroupScroller.viewport.verticalScrollPosition = commandsDataGroupScroller.maximum;
        }
        ]]>
	</fx:Script>

    <s:layout>
        <s:VerticalLayout gap="10"/>
    </s:layout>


    <TuringMachine:TMLineController id="line" width="100%"/>
    <!--
    <s:RichEditableText id="codeText" restrict="a-zA-Z0-1_,;"
        columnCount="6" columnGap="20"
        width="100%" height="10%"
        text="0,1,1,r,0;" visible="false"/>
    -->
    <s:HGroup width="100%" height="100%">
        <s:VGroup height="100%">
            <s:DataGroup id="headerDataGroup" width="100%"/>
            <s:HGroup  width="100%" height="100%" gap="0">
                <s:DataGroup id="commandsDataGroup" width="100%" height="100%" >
                    <s:layout>
                        <s:VerticalLayout paddingTop="2" paddingBottom="2"/>
                    </s:layout>
                </s:DataGroup>
                <s:VScrollBar id="commandsDataGroupScroller" height="100%" viewport="{commandsDataGroup}" />
            </s:HGroup>
        </s:VGroup>

        <s:RichEditableText id="descriptionTextField" height="100%" width="100%" fontSize="14" >
            Описание алгоритма составления программы...
        </s:RichEditableText>

    </s:HGroup>

    <s:Group id="btnGroup" left="0">
        <s:Button id="executeBtn" label="Выполнить" width="150" skinClass="Skins.ButtonBlueSkin"/>
        <s:Button id="stopBtn" label="Стоп" width="150" skinClass="Skins.ButtonBlueSkin"/>
    </s:Group>


</s:Group>
