<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:Menus="Components.Menus.*" xmlns:ContentPages="Components.ContentPages.*"
			   xmlns:Registration="Registration.*"
			   width="1000"
			   height="620"
			   frameRate="35"
			   applicationComplete="onAppComplete(event)"
			   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("Global")]
	</fx:Metadata>
	
	
	<fx:Style source="MainCSS.css"/>
	
	<fx:Script>
		<![CDATA[
			import Components.ContentPages.FinalTestCP;
			import Components.ContentPages.IntroCP;
			import Components.ContentPages.StatisticsCP;
			import Components.ContentPages.StrongCP;
			import Components.ContentPages.VocabularyCP;
			import Components.GoToExEvent;
			import Components.GradingEvent;
			
			import com.greensock.TweenLite;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;


        private const RESOURCE_BUNDLE:String = "Global";
        private var menuOpen:Boolean = false;

        private var _currentContentPage:UIComponent;
        public function get currentContentPage():UIComponent {
            return _currentContentPage;
        }

        public function set currentContentPage(value:UIComponent):void {
            _currentContentPage = value;
            headerMenu.currentContentPage = value;
        }

        protected function onAppComplete(event:FlexEvent):void {
            stage.scaleMode = StageScaleMode.NO_SCALE;
            stage.quality = StageQuality.LOW;
            configureContentPages();
            configureListeners();
            configureRegistrationPanel();
        }

        private function configureContentPages():void {

            introCP.visible = true;
            introCP.alpha = 1;
            currentContentPage = introCP;
        }


        private function configureListeners():void {
            openMenuBtn.addEventListener(MouseEvent.CLICK, onOpenMenuClick);
            registrationWindow.addEventListener('accept', onRegistartionSubmitBtnClick);

            statisticsCP.addEventListener(GoToExEvent.TYPE, onGoToExEvent);
            finalTestCP.addEventListener(GradingEvent.TYPE, onGradingEvent);
			
            leftMenu.addEventListener(GlobalConstants.INTRODUCTION_EVENT, onLeftMenuEvent);
            leftMenu.addEventListener(GlobalConstants.STRONG_EVENT, onLeftMenuEvent);
            leftMenu.addEventListener(GlobalConstants.FINAL_TEST_EVENT, onLeftMenuEvent);
            leftMenu.addEventListener(GlobalConstants.STATISTICS_EVENT, onLeftMenuEvent);
			leftMenu.addEventListener(GlobalConstants.VOCABULARY_EVENT, onLeftMenuEvent);
			leftMenu.addEventListener(GlobalConstants.LIT_EVENT, onLeftMenuEvent);
        }

        private function onGradingEvent(event:GradingEvent):void {
             statisticsCP.setAnswer(event.exerciseNumber, event.answer);
             statisticsCP.setStatus(event.exerciseNumber, event.stratus);
        }

        private function onGoToExEvent(event:GoToExEvent):void {
            leftMenu.onFinalTestBtn(null);
            switch (event.data) {
                case '1':
                    finalTestCP.currentState = 's1';
                    headerMenu.line.x = headerMenu.btn1.x;
                    break;
                case '2':
                    finalTestCP.currentState = 's2';
                    headerMenu.line.x = headerMenu.btn2.x;
                    break;
                case '3':
                    finalTestCP.currentState = 's3';
                    headerMenu.line.x = headerMenu.btn3.x;
                    break;
                case '4':
                    finalTestCP.currentState = 's4';
                    headerMenu.line.x = headerMenu.btn4.x;
                    break;
                case '5':
                    finalTestCP.currentState = 's5';
                    headerMenu.line.x = headerMenu.btn5.x;
                    break;
                case '6':
                    finalTestCP.currentState = 's6';
                    headerMenu.line.x = headerMenu.btn6.x;
                    break;
                /*case '7':

                    break;*/

            }
        }

        protected function onOpenMenuClick(event:MouseEvent):void {
            mainGroup.includeInLayout = false;
            if (menuOpen) {
                contentPagesGroup.removeEventListener(MouseEvent.CLICK, onOpenMenuClick);
                TweenLite.to(mainGroup, 0.3, {x: 0, onComplete: includeMainGroupInLayout});
                TweenLite.to(openMenuBtn, 1, {alpha: 0.6});
            }
            else {
                contentPagesGroup.addEventListener(MouseEvent.CLICK, onOpenMenuClick);
                TweenLite.to(mainGroup, 0.3, {x: leftMenu.width});
                TweenLite.to(openMenuBtn, 1, {alpha: 0});
            }
            menuOpen = !menuOpen;
        }

        private function includeMainGroupInLayout():void {
            mainGroup.includeInLayout = true;
        }

        protected function onLeftMenuEvent(event:Event):void {
            switch (event.type) {
                case GlobalConstants.INTRODUCTION_EVENT:
                    if (!(currentContentPage is IntroCP)) {
                        removeContentPage(currentContentPage);
                        addNewContentPage(introCP);
                        headerMenu.setDefaultProperties();
                        headerMenu.currentState = 'intro';
                    }
                    break;
                case GlobalConstants.STRONG_EVENT:
                    if (!(currentContentPage is StrongCP)) {
                        removeContentPage(currentContentPage);
                        addNewContentPage(strongCP);
                        headerMenu.setDefaultProperties();
                        headerMenu.currentState = 'normal';
                    }
                    break;
                case GlobalConstants.FINAL_TEST_EVENT:
                    if (!(currentContentPage is FinalTestCP)) {
                        removeContentPage(currentContentPage);
                        addNewContentPage(finalTestCP);
                        //headerMenu.setDefaultProperties();
                        headerMenu.currentState = 'tests';
                    }
                    break;
                case GlobalConstants.STATISTICS_EVENT:
                    if (!(currentContentPage is StatisticsCP)) {
                        removeContentPage(currentContentPage);
                        addNewContentPage(statisticsCP);
                        headerMenu.setDefaultProperties();
                        headerMenu.currentState = 'results';
                    }
                    break;
                case GlobalConstants.VOCABULARY_EVENT:
                 if(!(currentContentPage is VocabularyCP)){
	                 removeContentPage(currentContentPage);
	                 addNewContentPage(vocabularyCP);
	                 headerMenu.setDefaultProperties();
	                 headerMenu.currentState = 'vocabulary';
                 }
                 break; 
                case GlobalConstants.LIT_EVENT:
					if(!(currentContentPage is LibraryCP)){
						removeContentPage(currentContentPage);
						addNewContentPage(libraryCP);
						headerMenu.setDefaultProperties();
						headerMenu.currentState = 'library';
					}
                    break;
            }
        }

        private function removeContentPage(contentPage:UIComponent):void {
            contentPage.includeInLayout = false;
            TweenLite.to(contentPage, 0.2, {alpha: 0, onComplete: removePageFromStage, onCompleteParams: [contentPage]});
        }

        private function addNewContentPage(newContentPage:UIComponent):void {
            //contentPagesGroup.addElement(newContentPage);
            newContentPage.y = 30;
            newContentPage.x = 0;
            newContentPage.alpha = 0;
            newContentPage.visible = true;
            TweenLite.to(newContentPage, 0.4, {y: 0, alpha: 1});
            currentContentPage = newContentPage;
        }

        private function removePageFromStage(contentPage:UIComponent):void {
            //contentPagesGroup.removeElement(contentPage);
            contentPage.visible = false;
        }

        private function configureRegistrationPanel():void {

        }

        protected function onRegistartionSubmitBtnClick(event:Event):void {
            TweenLite.to(registrationWindow, 0.5, {x: -registrationWindow.width, onComplete: deleteRegistrationWindow});
            mainGroup.includeInLayout = false;
            TweenLite.fromTo(mainGroup, 0.5, {x: this.width}, {x: 0});
            leftMenu.onStatisticsBtn(null);
        }

        protected function deleteRegistrationWindow():void {
            this.removeElement(registrationWindow);
            mainGroup.includeInLayout = true;
        }
        ]]>
	</fx:Script>
	

	<s:layout>
		<s:VerticalLayout gap="0" />
	</s:layout>
	
	
	<Menus:HeaderMenu id="headerMenu" width="100%"/>
	
	<s:Group id="mainGroup" height="100%" width="100%" x="0">
		<s:Group id="contentPagesGroup" width="100%" height="100%" top="20" bottom="30" left="80">
			<ContentPages:IntroCP id="introCP"  alpha="0" height="100%" width="100%" visible="false"/>
			<ContentPages:StrongCP id="strongCP"  alpha="0" height="100%" width="100%" visible="false"/>
			<ContentPages:FinalTestCP id="finalTestCP"  alpha="0" height="100%" width="100%"  visible="false"/>
			<ContentPages:StatisticsCP id="statisticsCP"  alpha="0" height="100%" width="100%" visible="false"/>
			<ContentPages:VocabularyCP id="vocabularyCP"  alpha="0" height="100%" width="100%"  visible="false"/>
			<ContentPages:LibraryCP id="libraryCP"  alpha="0" height="100%" width="100%" visible="false"/>
		</s:Group>
			
		<s:HGroup x="{-leftMenu.width}" gap="0" height="100%">
			<Menus:LeftMenu id="leftMenu" top="20" width="{GlobalConstants.LEFT_MENU_WIDTH}" height="100%"/>
			<s:Button id="openMenuBtn" width="35" height="100%" alpha="0.6"/>	
		</s:HGroup>
		
	</s:Group>
	
	
	<Registration:RegistrationWindow id="registrationWindow" height="100%" width="100%" x="0" y="0" includeInLayout="false"/>
	
</s:Application>
